// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YellowBlossom.Infrastructure.Data;

#nullable disable

namespace YellowBlossom.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250425114626_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.Auth.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresDateUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Bug", b =>
                {
                    b.Property<Guid>("BugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedToTeamId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("PMIS_TaskTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PriorityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportedByTeamId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ReportedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Serverity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StepsToReduce")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TestCaseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestRunId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BugId");

                    b.HasIndex("AssignedToTeamId");

                    b.HasIndex("PMIS_TaskTaskId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ReportedByTeamId");

                    b.HasIndex("TestCaseId");

                    b.HasIndex("TestRunId");

                    b.ToTable("Bugs");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Invite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvitedUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Phase", b =>
                {
                    b.Property<Guid>("PhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhaseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PhaseStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PhaseId");

                    b.HasIndex("PhaseStatusId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Phases");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_PhaseStatus", b =>
                {
                    b.Property<Guid>("PhaseStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PhaseStatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PhaseStatusId");

                    b.ToTable("PhaseStatuses");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Priority", b =>
                {
                    b.Property<Guid>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PriorityDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PriorityId");

                    b.ToTable("Priorities");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductManager")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProjectStatusId");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_ProjectStatus", b =>
                {
                    b.Property<Guid>("ProjectStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ProjectStatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProjectStatusId");

                    b.ToTable("ProjectStatuses");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_ProjectTeam", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleOfTeam")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProjectId", "TeamId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TeamId");

                    b.ToTable("ProjectTeams");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_ProjectType", b =>
                {
                    b.Property<Guid>("ProjectTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ProjectTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProjectTypeId");

                    b.ToTable("ProjectTypes");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Task", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedTeam")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PriorityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TaskStatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TaskId");

                    b.HasIndex("AssignedTeam");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_TaskStatus", b =>
                {
                    b.Property<Guid>("TaskStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TaskStatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TaskStatusId");

                    b.ToTable("TaskStatuses");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Team", b =>
                {
                    b.Property<Guid>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TeamDescription")
                        .HasColumnType("text");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TeamId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_TestCase", b =>
                {
                    b.Property<Guid>("TestCaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActualResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExpectedResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Steps")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestCaseStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TestCaseId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("TaskId");

                    b.HasIndex("TestCaseStatusId");

                    b.HasIndex("TestTypeId");

                    b.ToTable("TestCases");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_TestCaseStatus", b =>
                {
                    b.Property<Guid>("TestCaseStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TestCaseStatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TestCaseStatusId");

                    b.ToTable("TestCaseStatuses");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_TestRun", b =>
                {
                    b.Property<Guid>("TestRunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("ExecutedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RunDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestRunStatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TestRunId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ExecutedBy");

                    b.HasIndex("TaskId");

                    b.HasIndex("TestRunStatusId");

                    b.ToTable("TestRuns");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_TestRunStatus", b =>
                {
                    b.Property<Guid>("TestRunStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TestRunStatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TestRunStatusId");

                    b.ToTable("TestRunStatuses");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_TestRunTestCase", b =>
                {
                    b.Property<Guid>("TestCaseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestRunId")
                        .HasColumnType("uuid");

                    b.Property<string>("ActualResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ExecutedByTeamId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExpectedResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("TestCaseStatusId")
                        .HasColumnType("uuid");

                    b.HasKey("TestCaseId", "TestRunId");

                    b.HasIndex("ExecutedByTeamId");

                    b.HasIndex("TestCaseStatusId");

                    b.HasIndex("TestRunId");

                    b.ToTable("TestRunTestCases");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_TestType", b =>
                {
                    b.Property<Guid>("TestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TestDescription")
                        .HasColumnType("text");

                    b.Property<string>("TestTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TestTypeId");

                    b.ToTable("TestTypes");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_UserTeam", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TeamId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTeams");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("YellowBlossom.Domain.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("YellowBlossom.Domain.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("YellowBlossom.Domain.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.Auth.RefreshToken", b =>
                {
                    b.HasOne("YellowBlossom.Domain.Models.Auth.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Bug", b =>
                {
                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Team", "AssignedToTeam")
                        .WithMany("BugsAssignedTo")
                        .HasForeignKey("AssignedToTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Task", null)
                        .WithMany("Bugs")
                        .HasForeignKey("PMIS_TaskTaskId");

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Priority", "Priority")
                        .WithMany("Bugs")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Team", "ReportedByTeam")
                        .WithMany("BugsReportedBy")
                        .HasForeignKey("ReportedByTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_TestCase", "TestCase")
                        .WithMany("Bugs")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_TestRun", "TestRun")
                        .WithMany("Bugs")
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedToTeam");

                    b.Navigation("Priority");

                    b.Navigation("ReportedByTeam");

                    b.Navigation("TestCase");

                    b.Navigation("TestRun");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Invite", b =>
                {
                    b.HasOne("YellowBlossom.Domain.Models.Auth.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Project", "Project")
                        .WithMany("InviteTokens")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvitedUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Phase", b =>
                {
                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_PhaseStatus", "PhaseStatus")
                        .WithMany("Phases")
                        .HasForeignKey("PhaseStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhaseStatus");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Product", b =>
                {
                    b.HasOne("YellowBlossom.Domain.Models.Auth.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Project", b =>
                {
                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Product", "Product")
                        .WithMany("Projects")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_ProjectStatus", "ProjectStatus")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_ProjectType", "ProjectType")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.Auth.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProjectStatus");

                    b.Navigation("ProjectType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_ProjectTeam", b =>
                {
                    b.HasOne("YellowBlossom.Domain.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Project", "Project")
                        .WithMany("ProjectTeams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Team", "Team")
                        .WithMany("ProjectTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Task", b =>
                {
                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Team", "Team")
                        .WithMany("Tasks")
                        .HasForeignKey("AssignedTeam")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("YellowBlossom.Domain.Models.Auth.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Priority", "Priority")
                        .WithMany("Tasks")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_TaskStatus", "TaskStatus")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("TaskStatus");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Team", b =>
                {
                    b.HasOne("YellowBlossom.Domain.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_TestCase", b =>
                {
                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Team", "Team")
                        .WithMany("TestCases")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Task", "Task")
                        .WithMany("TestCases")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_TestCaseStatus", "TestCaseStatus")
                        .WithMany("TestCases")
                        .HasForeignKey("TestCaseStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_TestType", "TestType")
                        .WithMany("TestCases")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("Team");

                    b.Navigation("TestCaseStatus");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_TestRun", b =>
                {
                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Team", "CreatedByTeam")
                        .WithMany("CreatedTestRuns")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Team", "ExecutedByTeam")
                        .WithMany("ExecutedTestRuns")
                        .HasForeignKey("ExecutedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Task", "Task")
                        .WithMany("TestRuns")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_TestRunStatus", "TestRunStatus")
                        .WithMany("TestRuns")
                        .HasForeignKey("TestRunStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByTeam");

                    b.Navigation("ExecutedByTeam");

                    b.Navigation("Task");

                    b.Navigation("TestRunStatus");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_TestRunTestCase", b =>
                {
                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Team", "ExecutedByTeam")
                        .WithMany()
                        .HasForeignKey("ExecutedByTeamId");

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_TestCase", "TestCase")
                        .WithMany("TestRunTestCases")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_TestCaseStatus", "TestCaseStatus")
                        .WithMany()
                        .HasForeignKey("TestCaseStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_TestRun", "TestRun")
                        .WithMany("TestRunTestCases")
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExecutedByTeam");

                    b.Navigation("TestCase");

                    b.Navigation("TestCaseStatus");

                    b.Navigation("TestRun");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_UserTeam", b =>
                {
                    b.HasOne("YellowBlossom.Domain.Models.PMIS.PMIS_Team", "Team")
                        .WithMany("UserTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowBlossom.Domain.Models.Auth.User", "User")
                        .WithMany("UserTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.Auth.User", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Projects");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Tasks");

                    b.Navigation("UserTeams");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_PhaseStatus", b =>
                {
                    b.Navigation("Phases");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Priority", b =>
                {
                    b.Navigation("Bugs");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Product", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Project", b =>
                {
                    b.Navigation("InviteTokens");

                    b.Navigation("ProjectTeams");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_ProjectStatus", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_ProjectType", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Task", b =>
                {
                    b.Navigation("Bugs");

                    b.Navigation("TestCases");

                    b.Navigation("TestRuns");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_TaskStatus", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_Team", b =>
                {
                    b.Navigation("BugsAssignedTo");

                    b.Navigation("BugsReportedBy");

                    b.Navigation("CreatedTestRuns");

                    b.Navigation("ExecutedTestRuns");

                    b.Navigation("ProjectTeams");

                    b.Navigation("Tasks");

                    b.Navigation("TestCases");

                    b.Navigation("UserTeams");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_TestCase", b =>
                {
                    b.Navigation("Bugs");

                    b.Navigation("TestRunTestCases");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_TestCaseStatus", b =>
                {
                    b.Navigation("TestCases");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_TestRun", b =>
                {
                    b.Navigation("Bugs");

                    b.Navigation("TestRunTestCases");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_TestRunStatus", b =>
                {
                    b.Navigation("TestRuns");
                });

            modelBuilder.Entity("YellowBlossom.Domain.Models.PMIS.PMIS_TestType", b =>
                {
                    b.Navigation("TestCases");
                });
#pragma warning restore 612, 618
        }
    }
}
